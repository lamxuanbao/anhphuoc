<?php

namespace Kizi\Core\Repositories;


use Prettus\Repository\Eloquent\BaseRepository as PrettusBaseRepository;

abstract class BaseRepository extends PrettusBaseRepository
{
    public $data;

    public function show($id, $columns = ['*'])
    {
        $this->data = parent::find($id, $columns);
        return $this->data;
    }

    public function paging($query, $params)
    {
        if (!isset($params['pagination'])) {
            if (isset($params['length'])) {
                $query = $query->limit($params['length']);
            }
            return $query->get();
        } else {
            $total = $query->count();
            if (!isset($params['length'])) {
                $params['length'] = config('repository.pagination.limit');
            }
            if(isset($params['page'])){
                $params['start'] = 0;
                if((int) $params['page'] > 1){
                    $params['start'] = $params['length'] * ($params['page'] - 1);
                }
            }else {
                if (!isset($params['start'])) {
                    $params['start'] = 0;
                }
            }
            if ($total > 0 && $params['length'] > 0) {
                $query = $query->limit($params['length'])
                    ->offset($params['start']);
            }
            $result = [
                'rows' => $query->get(),
                'recordsTotal' => (int) $total,
                'length' => (int) $params['length'],
                'start' => (int) $params['start']
            ];
            if (isset($params['draw'])) {
                $result['draw'] = $params['draw'] ?? 1;
            }

            return $result;
        }
    }

    protected function beforeSave(array &$attributes)
    {
    }

    protected function beforeCreate(array &$attributes)
    {
    }

    protected function beforeUpdate(array &$attributes)
    {
    }

    protected function beforeUpdateOrCreate(array &$attributes)
    {
    }

    protected function afterSave(array &$attributes)
    {
    }

    protected function afterCreate(array &$attributes)
    {
    }

    protected function afterUpdate(array &$attributes)
    {
    }

    protected function afterUpdateOrCreate(array &$attributes)
    {
    }

    public function create(array $attributes)
    {
        $this->beforeCreate($attributes);
        $this->beforeSave($attributes);
        $this->data = parent::create($attributes); // TODO: Change the autogenerated stub
        $this->afterCreate($attributes);
        $this->afterSave($attributes);
        $this->show($this->data->id);
        return $this->data;
    }

    public function update(array $attributes, $id)
    {
        $this->beforeUpdate($attributes);
        $this->beforeSave($attributes);
        $this->data = parent::update($attributes, $id); // TODO: Change the autogenerated stub
        $this->afterUpdate($attributes);
        $this->afterSave($attributes);
        $this->show($this->data->id);
        return $this->data;
    }

    public function updateOrCreate(array $attributes, array $values = [])
    {
        $this->beforeUpdateOrCreate($attributes);
        $this->beforeSave($attributes);
        $this->data = parent::updateOrCreate($attributes, $values); // TODO: Change the autogenerated stub
        $this->afterUpdateOrCreate($attributes);
        $this->afterSave($attributes);
        $this->show($this->data->id);
        return $this->data;
    }
}
