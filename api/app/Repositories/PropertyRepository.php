<?php
/**
 * Created by PhpStorm.
 * User: nhockizi
 * Date: 8/1/21
 * Time: 14:07
 */

namespace App\Repositories;


use App\Models\Properties;
use App\Models\PropertyImages;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Kizi\Core\Libraries\Helpers;
use Kizi\Core\Repositories\BaseRepository;

class PropertyRepository extends BaseRepository
{
    public function model()
    {
        return Properties::class;
    }

    public function getList($params)
    {
        $query = $this->model;
        if (isset($params['sortField'])) {
            if (isset($params['sortOrder']) && in_array($params['sortOrder'], ['asc', 'desc'])) {
                $query = $query->OrderByTranslation($params['sortField'], $params['sortOrder']);
            } else {
                $query = $query->OrderByTranslation($params['sortField']);
            }
        } else {
            $query = $query->orderBy('id','desc');
        }
        if (Auth::check()) {
//            $query = $query->where('id', '<>', Auth::user()->id);
        }
        $result = $this->paging(
            $query,
            $params
        );

        return $result;
    }

    public function create(array $attributes)
    {
        parent::create($attributes); // TODO: Change the autogenerated stub
        $images = [];
        if (isset($attributes['remove_files']) && is_array($attributes['remove_files'])) {
            PropertyImages::whereIn('id', $attributes['remove_files'])
                          ->delete();
        }
        if (isset($attributes['files']) && is_array($attributes['files'])) {
            foreach ($attributes['files'] as $file) {
                $images[] = Helpers::uploadFile($file, 'property');
            }
        }
        if (count($images) > 0) {
            $this->data->images()
                   ->createMany($images);
        }
        $this->data->images;

        return $this->data;
    }
    public function show($id, $columns = ['*'])
    {
        parent::show($id, $columns); // TODO: Change the autogenerated stub
        $this->data->images;
        return $this->data;
    }
}
