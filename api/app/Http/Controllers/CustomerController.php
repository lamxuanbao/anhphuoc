<?php

namespace App\Http\Controllers;

use App\Models\Customers;
use App\Repositories\CustomerRepository;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Kizi\Core\Http\Controllers\Controller;

class CustomerController extends Controller
{
    public function __construct(Request $request, CustomerRepository  $repository)
    {
        $this->request = $request;
        $this->repository = $repository;
    }
    protected function validateStore()
    {
        $this->validation(
            [
                'email'                 => [
                    'required',
                    'email',
                    'max:191',
                    'unique:customers',
                ],
                'password'              => [
                    'required',
                    'min:6'
                ],
            ]
        );
        parent::validateStore(); // TODO: Change the autogenerated stub
    }
//    public function register()
//    {
//        $this->validate(
//            $this->request,
//            [
//                'email'    => 'required|string',
//                'password' => 'required|string',
//            ]
//        );
//
//        $credentials = $this->request->only(['email', 'password']);
//        $a           = 1;
//        $aas         = 2;
//    }

    public function login()
    {
        $this->validate(
            $this->request,
            [
                'email'    => 'required|email',
                'password' => 'required|string',
            ]
        );
        $guards = config('auth');
        $check = $guards['defaults']['guard'] ?? null;
        $email = $this->request->input('email');
        $password = $this->request->input('password');
        $guard = $this->request->header('App-Role') ?? null;
        if (!isset($guards['guards'][$guard])) {
            $guard = null;
        }
        $user = Customers::email($email)
            ->first();

        if (!$user) {
            return response_api(
                [
                    'email' => [
                        __('auth.email')
                    ],
                ],
                422,
                __('auth.email')
            );
        }
        if (!Hash::check($password, $user->password)) {
            return response_api(
                [
                    'password' => [
                        __('auth.password')
                    ],
                ],
                422,
                __('auth.password')
            );
        }
        $input = ['email' => $email, 'password' => $password];
        $token = auth($guard)->attempt($input);
        if (!$token) {
            return response_api(
                [
                    'email' => [
                        __('auth.email')
                    ],
                ],
                422,
                __('auth.email')
            );
        }
        return response_api(
            [
                'token' => $token,
                'token_type' => 'bearer',
                'expires_in' => Auth::factory()
                        ->getTTL() * 60,
            ]
        );
    }


}
